#!/usr/bin/env python3


import ruamel.yaml
import subprocess
import sys
import os
import numpy as np
import math

work_dir = os.path.dirname(os.path.realpath(__file__))
yaml = ruamel.yaml.YAML()

yaml_stream = open(sys.argv[1], "r")
config = yaml.load(yaml_stream)
yaml_stream.close()

tmp_path = config["properties"]["tmp_path"]
N_par = int(config["parameters"]["Nfibs"])
gamma_result = abs(float(config["parameters"]["gamma"]))
L = abs(float(config["parameters"]["L"]))

matrix_const = np.diagflat(np.ones(N_par-1),1) + np.diagflat(np.ones(N_par-1),-1)


def fun(fun_param, fun_x):
    return np.matmul(matrix_const, fun_x) + L * np.power(fun_x, 3) - fun_param * fun_x


def iterate_fun(iter_par, iter_x):
    iter_matr = matrix_const + 3.0 * L * np.diagflat(np.power(iter_x, 2), 0) - \
                iter_par * np.eye(N_par)
    return iter_x - np.matmul(np.linalg.inv(iter_matr), fun(iter_par, iter_x))


def init_fun(num, init_param):
    param_tmp = np.sqrt(2 * init_param )
    return 1.0*np.sign(num - int(N_par / 2)-0.5) * param_tmp / (np.sqrt(L) * np.cosh((num - int(N_par / 2)-0.5) * param_tmp))


gamma = 5.0
cur_x = np.fromfunction(init_fun, (N_par,), dtype=float, init_param=gamma)

while True:
    while True:
        tmp_x = iterate_fun(gamma, cur_x)
        delta_x = np.max(np.abs(cur_x - tmp_x)) / np.max(cur_x)
        cur_x = tmp_x
        if delta_x < 1e-5 and np.max(np.abs(fun(gamma, cur_x))) < 1e-5:
            break
    if gamma == gamma_result:
        break
    
    if abs(gamma - gamma_result) < 0.1:
        gamma = gamma_result
    else:
        gamma += 0.1* math.copysign(1, gamma_result - gamma)


print(cur_x)
cur_x.tofile(tmp_path + "/init.bin")

proc = subprocess.Popen([work_dir+"/CalcProj_c++", sys.argv[1]])
result = proc.wait()
